@using Frapid.ApplicationState.Cache
@model MixERP.Inventory.ViewModels.OpeningInventoryViewModel

@{
    ViewBag.Title = "Opening Inventory";
    Layout = ViewBag.InventoryLayoutPath;
    var meta = AppUsers.GetCurrent();
}
@if (!Model.MultipleInventoryAllowed && Model.HasOpeningInventory)
{
    <div class="ui attached segment" style="min-height: 100%; padding: 3em;">
        <div class="ui huge header">Opening Inventory</div>
        <div class="ui divider"></div>
        <div class="ui positive message">Opening inventory has already been entered for this office.</div>

        <a href="/dashboard/inventory/setup/opening-inventories" class="ui positive button">Okay</a>
    </div>
}
else
{
    <style>
        #dashboard-container {
            padding: 0 !important;
        }

        iframe {
            background-color: white;
            width: 100%;
            height: 500px;
            border: none;
            display: none;
        }

        .inverted.header, .inverted.form {
            background: transparent !important;
        }

        input.invoice.number.for.reprint {
            background: transparent !important;
            border: 1px solid #555 !important;
            color: #eee !important;
        }

        .inverted.info.message {
            background-color: #B3A12E !important;
            border: 1px solid #B3A12E !important;
            color: #fff !important;
        }

        .info {
            padding: 0.25em 0.5em;
            display: inline-block;
            margin: 1px;
            -ms-border-radius: 4px;
            border-radius: 4px;
            font-weight: bold;
            text-transform: uppercase;
            font-size: 0.92em;
        }

        .office.info {
            background-color: #D65302;
        }

        .user.info {
            background-color: #68A800;
        }

        .area.info {
            background-color: #02B3D6;
        }

        .counter.info {
            background-color: #AC02D6;
        }



        .status.head {
            background-color: #444;
            padding: 1em;
            cursor: pointer;
        }

        .inline.blocks > .item {
            display: inline-block !important;
            padding: 2px;
        }

        .two.inline.blocks > .item {
            width: 50%;
        }

        .three.inline.blocks > .item {
            width: 33%;
        }

        .four.inline.blocks > .item {
            width: 25%;
        }

        .status.head .left {
            display: inline-block;
            width: 50%;
        }

        .status.head .right {
            display: inline-block;
            text-align: right;
            width: 50%;
        }

        .item.list {
            background-color: #333;
            cursor: pointer;
            text-align: center;
        }

            .item.list .item {
                display: inline-flex;
                background-color: #333;
                margin: 4px;
                height: 280px;
                padding: 0.5em;
                width: 200px;
                cursor: pointer;
            }

                .item.list .item:hover {
                    background-color: #444;
                }

                .item.list .item .info {
                    overflow: hidden;
                }

                .item.list .item .photo {
                    position: relative;
                    top: -16px;
                    left: -2px;
                    width: 180px;
                    height: 270px;
                }


                .item.list .item:hover img {
                    filter: grayscale(0%) !important;
                }

                .item.list .item .info .photo img {
                    height: 390px;
                    filter: grayscale(70%);
                }

                .item.list .item .info .name {
                    font-size: 1.4em;
                    font-weight: 600;
                    position: relative;
                    z-index: 1;
                    top: -5.5em;
                    line-height: 1.2em;
                    text-align: center;
                    text-shadow: 2px 2px 10px black;
                }

                .item.list .item .info .price {
                    font-size: 3em;
                    font-weight: 400;
                    text-align: right;
                    position: relative;
                    z-index: 1;
                    top: 0.7em;
                    text-shadow: -2px 3px 10px #000;
                    color: #eee;
                }


        .category.list {
            padding: 4px;
            text-align: center;
            background-color: #555;
        }

            .category.list .filter {
                text-align: right;
                display: inline-block;
            }

            .category.list .category, .cat.filter {
                display: inline-block;
                background-color: #555;
                color: white;
                padding: 4px 12px;
                margin: 2px;
                border-radius: 12px;
                text-transform: uppercase;
                font-size: 0.9em;
                letter-spacing: 1px;
                cursor: pointer;
            }

            .category.list .cat.filter {
                background-color: #444;
            }

            .category.list .category.selected, .category.list .category:hover {
                background-color: #78AD05;
            }

            .category.list .cat.filter:hover {
                background-color: #FA6400 !important;
            }

        .search.panel {
            background-color: #666;
            padding: 1em;
            text-align: center;
        }

            .search.panel input {
                text-align: center;
                font-size: 1.1em;
                background-color: transparent;
                border: 1px solid #999;
                border-radius: 2em;
                text-transform: uppercase;
                height: 2em;
                width: 20em;
            }


        .opening.items .item {
            background-color: #333;
            padding: 3px 9px;
            border-bottom: 1px dotted #444;
            cursor: pointer;
            -webkit-user-select: none; /* webkit (safari, chrome) browsers */
            -moz-user-select: none; /* mozilla browsers */
            -khtml-user-select: none; /* webkit (konqueror) browsers */
            -ms-user-select: none; /* IE10+ */
        }

            .opening.items .item:nth-child(even) {
                background-color: #373737 !important;
            }

            .opening.items .item:hover {
                background-color: #3a3a3a !important;
            }

            .opening.items .item .block {
                display: inline-block;
                height: 82px;
                overflow: hidden;
            }

                .opening.items .item .block img {
                    height: 82px;
                }

            .opening.items .item .photo.block {
                width: 90px;
                overflow: hidden;
            }

            .opening.items .item .number.block {
                width: 120px;
            }


                .opening.items .item .number.block button {
                    height: 100%;
                    text-transform: uppercase;
                    letter-spacing: 1px;
                    font-weight: 100;
                }

            .opening.items .item input {
                font-size: 1.3em;
                margin: 0 0 0.3em 0;
                background-color: #333;
                border: 1px solid #555;
                width: 100%;
                padding: 4px 16px;
                text-align: right;
                border-radius: 0.5em;
            }

            .opening.items .item .info.block {
                width: calc(100% - 220px);
                padding: 1em;
            }

                .opening.items .item .info.block .price.info,
                .opening.items .item .info.block .header {
                    display: block;
                }

                .opening.items .item .info.block .header {
                    font-size: 1.5em;
                    font-weight: 100;
                    text-transform: uppercase;
                }

                .opening.items .item .info.block .price.info {
                    padding-top: 4px;
                }

                .opening.items .item .info.block .price.info
                {
                    font-size: 1.1em;
                    text-align: left;
                    padding: 0;
                    text-transform: none;
                    color: #fbd842;
                }


        .tender.info {
            background-color: #333;
            width: 100%;
            cursor: pointer;
            margin: 0 0 8px 0;
            padding: 6px 0;
        }


            .tender.info:hover {
                background-color: #3f3f3f;
            }


        .summary.items {
            padding: 0.5em 1em;
            display: flex;
        }

            .summary.items > .item {
                display: inline-flex;
                flex-direction: column;
                padding: 2px;
            }

        .two.summary.items > .item {
            width: 48%;
        }

        .one.summary.items > .item {
            width: 96%;
        }

        .summary.items > .item > .description {
            padding-bottom: 0.5em;
            font-size: 0.9em;
            text-align: left;
        }

        .summary.items > .item > .money {
            padding-top: 0.1em;
            font-size: 3em;
        }


        input.pan.number,
        input.customer.name,
        input.customer.address {
            font-size: 12px !important;
            padding: 8px !important;
        }

        .customer.name.item {
            width: 40% !important;
        }

        .customer.address.item {
            width: 30% !important;
        }

        .pan.number.item {
            width: 25% !important;
        }

        .inverted.dropdown,
        .inverted.dropdown input.search,
        .inverted.dropdown .menu,
        .inverted.dropdown .item,
        .inverted.dropdown .message {
            background-color: #555 !important;
            color: #eee !important;
            border: 1px solid #666 !important;
        }

            .inverted.dropdown .item.selected,
            .inverted.dropdown .item:hover {
                background-color: #666 !important;
            }

        .summary.items input,
        .summary.items select {
            background-color: #555 !important;
            color: #eee !important;
            border: 1px solid #666 !important;
            padding: .87em;
            border-radius: 0.4em;
            width: 100%;
            -moz-appearance: none; /* Firefox */
        }

        select.inverted {
            background-color: #333;
            border: 1px solid #555;
            width: 100%;
            padding: 0.55em 1em;
            border-radius: 0.5em;
            -moz-appearance: none; /* Firefox */
        }
    </style>



    <div class="ui attached inverted pos opening inventory segment">
        <div class="ui active inverted dimmer" id="POSDimmer">
            <div class="ui large text loader">Doing something ...</div>
        </div>
        <div class="ui grid">
            <div class="eleven wide column">
                <div class="status head">
                    <div class="left">
                        <strong class="title info">
                            Opening Inventory
                        </strong>
                        <span class="office info" title="Current Branch Office">
                            @meta.OfficeName
                        </span>
                        <span class="user info" title="You">
                            @meta.Name
                        </span>
                        <span class="area info" title="Current Area">
                            @meta.OfficeCode
                        </span>
                        <span class="office info" title="Office Name">
                            @meta.OfficeName
                        </span>
                    </div>
                </div>



                <div class="category list">
                    <div class="cat filter" style="display: none;">
                        Clear
                        <i class="delete icon"></i>
                    </div>
                </div>
                <div class="search panel">
                    <input type="search" placeholder="Search ..." />

                </div>
                <div class="item list" id="POSItemList">
                </div>
            </div>
            <div class="five wide column">
                <div class="tender info">
                    <div id="SummaryItems" class="two summary items">
                        <div class="amount item">
                            <div class="description">Amount</div>
                            <div class="money">
                                <span></span>
                            </div>
                        </div>
                        <div class="store item">
                            <div class="description">Store</div>
                            <div class="control">
                                <select id="StoreSelect"></select>
                            </div>
                        </div>
                    </div>
                    <div class="two summary items">
                        <div class="value date item">
                            <div class="description">Value Date</div>
                            <div class="control">
                                <input type="text" class="date" id="ValueDateInputDate" />
                            </div>
                        </div>
                        <div class="book date item">
                            <div class="description">Book Date</div>
                            <div class="control">
                                <input type="text" class="date" id="BookDateInputDate" />
                            </div>
                        </div>
                    </div>
                    <div class="two summary items">
                        <div class="reference number item">
                            <div class="description">Ref#</div>
                            <div class="control">
                                <input type="text" id="ReferenceNumberInputText" />
                            </div>
                        </div>
                        <div class="memo item">
                            <div class="description">Memo</div>
                            <div class="control">
                                <input type="text" id="StatementReferenceInputText" />
                            </div>
                        </div>
                    </div>
                    <div class="ui one column padded grid">
                        <div class="column">
                            <button id="CheckoutButton" class="ui green icon big button">
                                <i class="cart icon"></i>
                                CHECKOUT
                            </button>
                            <button id="ClearScreenButton" class="ui red icon big button">
                                <i class="delete icon"></i>
                                CLS
                            </button>
                        </div>
                    </div>
                </div>
                <div id="OpeningItems" class="opening items">
                </div>
            </div>
        </div>
    </div>


    <script>
    $("#OpeningItems .item")
        .on("contextmenu",
            function (e) {
                e.preventDefault();
                const el = $(this);
                const defaultMenu = el.find(".info.block, .number.block");
                const contextMenu = el.find(".context.menu");

                defaultMenu.toggle();
                contextMenu.toggle();
            });
    </script>

    <script>
    var itemTemplate = `<div class="item" id="pos-{ItemId}" data-cost-price="{CostPrice}" data-photo="{Photo}" data-unit-id="{UnitId}" data-valid-units="{ValidUnits}" data-brand="{BrandName}" data-item-group="{ItemGroupName}" data-item-name="{ItemName}" data-item-code="{ItemCode}" data-item-id="{ItemId}" data-price="{Price}">
	<div class="photo block">
		<img src="{Photo}">
	</div>
	<div class="info block">
		<div class="header">{ItemName}</div>
		<div class="price info">
			<span class="rate">{CostPrice}</span>
			<span>&nbsp; x&nbsp; </span>
			<span class="quantity">1</span>
			<span>&nbsp; =&nbsp; </span>
			<span class="amount"></span>
		</div>
		<div>
			<select class="unit inverted" data-item-id="{ItemId}">
			</select>
		</div>
	</div>
	<div class="number block">
		<input type="text" class="price" title="Edit Price" value="{CostPrice}">
		<input type="text" class="quantity" title="Enter Quantity" value="1">
		<button class="ui red fluid button" onclick="removeItem(this);" style="display:none;">Delete</button>
	</div>
</div>`
    </script>

    <script>
    var products = [];
    var metaUnits = [];

    function fetchUnits() {
        function request() {
            const url = "/api/forms/inventory/units/all";
            return window.getAjaxRequest(url);
        };

        const ajax = request();

        ajax.success(function (response) {
            window.metaUnits = response;
        });
    };

    function fetchProducts() {
        function request() {
            const url = "/dashboard/inventory/items/stockable/view";
            return window.getAjaxRequest(url);
        };

        const ajax = request();

        ajax.success(function (response) {
            window.products = response;
            $(document).trigger("itemFetched");
        });
    };

    $(".search.panel input").keyup(function () {
        const el = $(this);
        const term = el.val();

        const categoryEl = $(".category.list .selected.category");
        var category = "";

        if (categoryEl.length) {
            category = categoryEl.text();
        };

        displayProducts(category, term);

        initializeClickAndAction();
    });

    $(".search.panel input").keydown(function (e) {
        if (e.keyCode === 13) {
            const item = $(".item.list .item:first");

            if (item.length) {
                item.trigger("click");
            };
        };
    });

    window.fetchUnits();
    window.fetchProducts();

    setTimeout(function () {
        window.fetchProducts();
    }, 120000);

    function removeItem(el) {
        const confirmed = confirm("Are you sure?");

        if (!confirmed) {
            return;
        };

        el = $(el);
        const container = el.parent().parent();
        container.remove();
        window.updateTotal();
    };

    $(document).on("itemFetched", function () {
        $("#POSDimmer").removeClass("active");
        displayProducts();
        displayCategories();
        initializeClickAndAction();
    });


    function initializeClickAndAction() {
        $("#POSItemList .item").off("click").on("click", function () {
            var el = $(this);
            var costPrice = el.attr("data-cost-price");
            var photo = el.attr("data-photo");

            var barCode = el.attr("data-barcode");
            var brand = el.attr("data-brand");
            var unitId = el.attr("data-unit-id");
            var validUnits = el.attr("data-valid-units");
            var itemGroup = el.attr("data-item-group");
            var itemName = el.attr("data-item-name");
            var itemCode = el.attr("data-item-code");
            var itemId = el.attr("data-item-id");
            var price = parseFloat(costPrice || 0);

            if (!price) {
                alert("Cannot add item because the price is zero.");
                return;
            };



            var targetEl = $("#OpeningItems");
            var selector = "pos-" + itemId;
            var existingEl = $("#" + selector);

            if (existingEl.length) {
                var existingQuantitySpan = existingEl.find("span.quantity");
                var existingQuantityInput = existingEl.find("input.quantity");

                var quantity = parseInt(existingQuantitySpan.text() || 0);
                quantity++;

                existingQuantitySpan.text(quantity);
                existingQuantityInput.val(quantity).trigger("keyup");

                window.updateTotal();
                return;
            };

            var template = itemTemplate;

            template = template.replace(/{ItemId}/g, itemId);
            template = template.replace(/{CostPrice}/g, costPrice);
            template = template.replace(/{Photo}/g, photo);
            template = template.replace(/{BarCode}/g, barCode);
            template = template.replace(/{BrandName}/g, brand);
            template = template.replace(/{ItemGroupName}/g, itemGroup);
            template = template.replace(/{ItemName}/g, itemName);
            template = template.replace(/{ItemCode}/g, itemCode);
            template = template.replace(/{Price}/g, price);
            template = template.replace(/{UnitId}/g, unitId);
            template = template.replace(/{ValidUnits}/g, validUnits);

            var item = $(template);
            var quantityInput = item.find("input.quantity");
            var priceInput = item.find("input.price");
            var unitSelect = item.find("select.unit");

            function loadUnits(el, defaultUnitId, validUnits) {
                el.html("");

                const units = window.Enumerable.From(window.metaUnits)
                    .Where(function (x) {
                        return validUnits.indexOf(x.UnitId.toString()) > -1;
                    }).ToArray();

                $.each(units, function () {
                    const unit = this;

                    const option = $("<option/ >");
                    option.attr("value", unit.UnitId);
                    option.html(unit.UnitName);

                    if (defaultUnitId === unit.UnitId) {
                        option.attr("selected", "");
                    };

                    option.appendTo(el);
                });

            };

            loadUnits(unitSelect, unitId, validUnits.split(','));

            function updateItemTotal(el) {
                const quantityEl = el.find("input.quantity");

                const quantity = parseInt(quantityEl.val() || 0);
                const price = parseFloat(el.find("input.price").val());
                //var price = parseFloat(el.attr("data-price") || 0);

                const amount = (price * quantity).toFixed(2);

                el.find("span.quantity").html(quantity);
                el.find("span.amount").html(amount);

                window.updateTotal();

            };

            quantityInput.on("keyup", function () {
                const el = $(this);
                const parentInfo = el.parent().parent();
                updateItemTotal(parentInfo);
            });

            priceInput.on("keyup", function () {
                const el = $(this);
                const parentInfo = el.parent().parent();
                updateItemTotal(parentInfo);
            });


            function getPrice(el) {
                function request(itemId, unitId) {
                    var url = "/dashboard/inventory/items/cost-price/{itemId}/{unitId}";
                    url = url.replace("{itemId}", itemId);
                    url = url.replace("{unitId}", unitId);

                    return window.getAjaxRequest(url);
                };

                const itemId = el.attr("data-item-id");
                const unitId = el.val();

                $(".pos.opening.segment").addClass("loading");
                const ajax = request(itemId, unitId);

                ajax.success(function (response) {
                    $(".pos.opening.segment").removeClass("loading");
                    const priceInput = el.parent().parent().parent().find("input.price");
                    priceInput.val(response).trigger("keyup");
                });

                ajax.fail(function (xr) {
                    $(".pos.opening.segment").removeClass("loading");
                    console.log(window.getAjaxErrorMessage(xhr));
                });
            };

            unitSelect.on("change", function () {
                getPrice($(this));
            });

            item.on("contextmenu", function (e) {
                e.preventDefault();
                const el = $(this);
                const inputEl = el.find(".number.block input");
                const buttonEl = el.find(".number.block button");

                inputEl.toggle();
                buttonEl.toggle();
            });

            item.appendTo(targetEl);
            quantityInput.trigger("keyup");
            window.updateTotal();
        });
    };

    function updateTotal() {
        const candidates = $("#OpeningItems div.item");
        const amountEl = $("#SummaryItems div.amount .money");

        var totalPrice = 0;
        //var totalQuantity = 0;

        $.each(candidates, function () {
            const el = $(this);
            const quantityEl = el.find("input.quantity");

            const quantity = parseInt(quantityEl.val() || 0);
            const price = parseFloat(el.find("input.price").val());
            //var price = parseFloat(el.attr("data-price") || 0);

            const amount = price * quantity;
            totalPrice += amount;
            //totalQuantity += quantity;
        });

        totalPrice = parseFloat(totalPrice.toFixed(2));

        amountEl.html(totalPrice);
    };

    function displayCategories() {
        const categories = window.Enumerable.From(products).Distinct(function (x) { return x.ItemGroupName }).Select(function (x) { return x.ItemGroupName }).ToArray();
        var targetEl = $(".cat.filter");
        $(".category.list").find(".category").remove();

        targetEl.off("click").on("click", function () {
            displayProducts();
            $(".category").removeClass("selected");
            targetEl.hide();
            initializeClickAndAction();
        });

        $.each(categories, function () {
            const category = $("<div class='category' />");
            category.html(this);

            category.off("click").on("click", function () {
                $(".search.panel input").val("");
                const el = $(this);
                const name = el.text();

                if (name) {
                    displayProducts(name);
                    $(".category").removeClass("selected");
                    el.addClass("selected");

                    targetEl.show();
                } else {
                    targetEl.hide();
                };

                initializeClickAndAction();
            });

            targetEl.before(category);
        });
    };

    function displayProducts(category, searchQuery) {
        var target = $("#POSItemList");

        var groupItems;

        if (!category && !searchQuery) {
            groupItems = products;
        } else {
            if (category && searchQuery) {
                groupItems = window.Enumerable
                    .From(products)
                    .Where(function (x) {
                        return x.ItemGroupName.toLowerCase() === category.toString().toLowerCase()
                            && x.ItemName.toLowerCase().indexOf(searchQuery.toLowerCase()) > -1;
                    }).ToArray();
            } else if (!category && searchQuery) {
                groupItems = window.Enumerable
                    .From(products)
                    .Where(function (x) {
                        return x.ItemName.toLowerCase().indexOf(searchQuery.toLowerCase()) > -1;
                    }).ToArray();
            } else {
                groupItems = window.Enumerable
                    .From(products)
                    .Where(function (x) {
                        return x.ItemGroupName.toLowerCase() === category.toString().toLowerCase();
                    }).ToArray();
            };
        };

        target.html("").hide();

        $.each(groupItems, function () {
            const product = this;

            const item = $("<div class='item' />");
            item.attr("data-item-id", product.ItemId);
            item.attr("data-item-code", product.ItemCode);
            item.attr("data-item-name", product.ItemName);
            item.attr("data-item-group", product.ItemGroupName);
            item.attr("data-brand", product.BrandName);
            item.attr("data-unit-id", product.UnitId);
            item.attr("data-valid-units", product.ValidUnits);
            item.attr("data-barcode", product.Barcode);
            item.attr("data-photo", product.Photo);
            item.attr("data-cost-price", product.CostPrice);

            if (product.HotItem) {
                item.addClass("hot");
            };

            const info = $("<div class='info' />");

            const price = $("<div class='price' />");
            price.html(window.getFormattedNumber(product.CostPrice));

            price.appendTo(info);


            const photo = $("<div class='photo' />");
            const img = $("<img />");
            img.attr("src", product.Photo + "?Height=200&Width=200");

            img.appendTo(photo);
            photo.appendTo(info);

            const name = $("<div class='name' />");
            name.html(product.ItemName);

            name.appendTo(info);

            info.appendTo(item);
            item.appendTo(target);
        });

        if (searchQuery) {
            target.show();
            return;
        };

        target.fadeIn(500);
    };

    </script>
    <script>
    $("#CheckoutButton").off("click").on("click", function () {

        function request(model) {
            const url = "/dashboard/inventory/setup/opening-inventories/new";
            const data = JSON.stringify(model);
            return window.getAjaxRequest(url, "POST", data);
        };

        function getModel() {
            function getDetails() {
                const items = $("#OpeningItems .item");
                var model = [];

                $.each(items, function () {
                    const el = $(this);
                    const itemId = parseInt(el.attr("data-item-id"));
                    const quantity = parseInt(el.find("input.quantity").val());
                    const unitId = parseInt(el.find("select.unit").val());
                    const price = parseFloat(el.find("input.price").val() || 0);

                    model.push({
                        StoreId: $("#StoreSelect").val(),
                        ItemId: itemId,
                        Quantity: quantity,
                        UnitId: unitId,
                        Price: price
                    });
                });

                return model;
            };

            const valueDate = $("#ValueDateInputDate").datepicker("getDate");
            const bookDate = $("#BookDateInputDate").datepicker("getDate");
            const referenceNumber = $("#ReferenceNumberInputText").val();
            const statementReference = $("#StatementReferenceInputText").val();
            const storeId = $("#StoreSelect").val();
            const details = getDetails();

            return {
                ValueDate: valueDate,
                BookDate: bookDate,
                ReferenceNumber: referenceNumber,
                StatementReference: statementReference,
                Details: details
            };
        };

        const model = getModel();

        if (!model.Details.length) {
            window.displayMessage("Please select an item.");
            return;
        };

        const confirmed = confirm("Are you sure");

        if (!confirmed) {
            return;
        };


        $("#CheckoutButton").addClass("loading");

        const ajax = request(model);

        ajax.success(function (response) {
            const id = response;
            document.location = "/dashboard/inventory/setup/opening-inventories/checklist/" + id;
        });

        ajax.fail(function (xhr) {
            $("#CheckoutButton").removeClass("loading");
            alert(JSON.stringify(xhr));
        });
    });
    </script>

    <script>
    $("#ClearScreenButton")
        .unbind("click")
        .bind("click",
            function () {
                clearScreen();
            });

    function clearScreen() {
        $("#OpeningItems").html("");
        window.updateTotal();
    };
    </script>

    <script>
    function displayFieldBinder(el, url) {
        function request() {
            return window.getAjaxRequest(url);
        };

        const ajax = request();

        ajax.success(function (response) {
            var options = "";

            $.each(response, function () {
                var option = "<option value='{key}'>{value}</option>";
                option = option.replace("{key}", this.Key);
                option = option.replace("{value}", this.Value);

                options += option;
            });

            el.html(options);
        });
    };

    function loadStores() {
        displayFieldBinder($("#StoreSelect"), "/api/forms/inventory/stores/display-fields");
    };

    loadStores();
    </script>

    <script>
    setTimeout(function () {
        $(".decimal").number(true, window.currencyDecimalPlaces, ".", "");
    }, 100);

    window.overridePath = "/dashboard/inventory/setup/opening-inventories";
    </script>
}
