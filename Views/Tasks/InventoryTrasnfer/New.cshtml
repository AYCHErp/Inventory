@using Frapid.ApplicationState.Cache
@model dynamic

@{
    ViewBag.Title = "Inventory";
    Layout = ViewBag.Layout;
}
<div class="ui attached page segment" style="min-height: 100%;padding:3em;display:none;">

    <div class="ui huge header">Inventory Transfer</div>
    <div class="ui divider"></div>

    <div class="ui form">
        <div class="inline fields">
            <div class="small field">
                <label for="ValueDateTextBox">Value Date</label>
                <input id="ValueDateTextBox" class="date" type="date">
            </div>
            <div class="small field">
                <label for="ReferenceNumberInputText">Ref#</label>
                <input id="ReferenceNumberInputText" maxlength="24" type="text">
            </div>
        </div>
    </div>
    <div>
        <table id="TransferGridView" class="ui table segment" style="min-width:1000px;max-width:2000px;">
            <thead>
                <tr>
                    <th style="width:150px">
                        <label for="TransactionTypeSelect">Type</label>
                    </th>
                    <th>
                        <label for="StoreSelect">Store</label>
                    </th>
                    <th>
                        <label for="ItemCodeInputText">Item Code</label>
                    </th>
                    <th style="width:400px">
                        <label for="ItemSelect">Item Name</label>
                    </th>
                    <th style="width:200px;">
                        <label for="UnitSelect">Unit</label>
                    </th>
                    <th style="width:100px" class="text-right">
                        <label for="QuantityInputText">Quantity</label>
                    </th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <tr class="footer-row ui form">
                    <td>
                        <select class="ui fluid dropdown" id="TransactionTypeSelect">
                            <option value="Cr">OUT</option>
                            <option value="Dr">IN</option>
                        </select>
                    </td>
                    <td>
                        <select id="StoreSelect" class="ui fluid dropdown"></select>
                    </td>
                    <td>
                        <input id="ItemCodeInputText" type="text">
                    </td>
                    <td>
                        <select id="ItemSelect" class="ui fluid dropdown"></select>
                    </td>
                    <td>
                        <select id="UnitSelect" class="ui fluid dropdown"></select>
                    </td>
                    <td>
                        <input id="QuantityInputText" class="text-right integer" type="text">
                    </td>
                    <td>
                        <input id="AddButton" value="Add" class="ui small red button" type="button">
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <div id="ErrorLabel" class="big error vpad16"></div>
    <div class="ui form" style="width:290px;">
        <div class="small field">
            <label for="StatementReferenceTextArea">Statement Reference</label>
            <textarea id="StatementReferenceTextArea" rows="4"></textarea>
        </div>
        <button id="SaveButton" class="ui small green button" type="button">
            Save
        </button>
        <a href="/dashboard/inventory/tasks/inventory-transfer" class="ui small red button">Back</a>
    </div>

    <input id="ItemIdHidden" value="" type="hidden">
</div>

<script>
    function displayFieldBinder(el, url) {
        function request() {
            return window.getAjaxRequest(url);
        };

        var ajax = request();

        ajax.success(function (response) {
            var options = "<option>Select</option>";

            $.each(response, function () {
                var option = "<option value='{key}'>{value}</option>";
                option = option.replace("{key}", this.Key);
                option = option.replace("{value}", this.Value);

                options += option;
            });

            el.html(options);
        });
    };

</script>

<script>
    var addButton = $("#AddButton");
    var dateTextBox = $("#DateTextBox");
    var errorLabel = $("#ErrorLabel");
    var itemIdHidden = $("#ItemIdHidden");
    var itemCodeInputText = $("#ItemCodeInputText");
    var itemSelect = $("#ItemSelect");
    var quantityInputText = $("#QuantityInputText");
    var referenceNumberInputText = $("#ReferenceNumberInputText");
    var saveButton = $("#SaveButton");
    var statementReferenceTextArea = $("#StatementReferenceTextArea");
    var storeSelect = $("#StoreSelect");
    var transactionTypeSelect = $("#TransactionTypeSelect");
    var transferGridView = $("#TransferGridView");
    var unitSelect = $("#UnitSelect");
    var valueDateTextBox = $("#ValueDateTextBox");
    var storeServiceUrl = "/api/forms/inventory/stores/display-fields";

    var url = "";
    var data = "";

    $(document).ready(function () {
        loadStores();
        loadItems();
    });

    addButton.click(function () {
        addRow();
    });

    var addRow = function () {
        itemCodeInputText.val(itemSelect.getSelectedValue());

        var tranType = transactionTypeSelect.getSelectedValue();
        var storeName = storeSelect.getSelectedText();
        var itemCode = itemCodeInputText.val();
        var itemName = itemSelect.getSelectedText();
        var unitName = unitSelect.getSelectedText();
        var quantity = parseInt(quantityInputText.val() || 0);

        if (transactionTypeSelect.length) {
            if (isNullOrWhiteSpace(tranType) || tranType === "Select") {
                makeDirty(transactionTypeSelect);
                return;
            };
        };

        if (isNullOrWhiteSpace(storeName) || storeName === "Select") {
            makeDirty(storeSelect);
            return;
        };

        if (isNullOrWhiteSpace(itemCode)) {
            makeDirty(itemCodeInputText);
            return;
        };

        if (isNullOrWhiteSpace(itemName) || itemName === "Select") {
            makeDirty(itemSelect);
            return;
        };

        if (isNullOrWhiteSpace(unitName) || unitName === "Select") {
            makeDirty(unitSelect);
            return;
        };

        if (quantity <= 0) {
            makeDirty(quantityInputText);
            return;
        };

        removeDirty(transactionTypeSelect);
        removeDirty(storeSelect);
        removeDirty(itemCodeInputText);
        removeDirty(itemSelect);
        removeDirty(unitSelect);
        removeDirty(quantityInputText);

        appendToTable(tranType, storeName, itemCode, itemName, unitName, quantity);
        itemCodeInputText.val("");
        quantityInputText.val("");

        if (transactionTypeSelect.length) {
            transactionTypeSelect.focus();
            return;
        };

        storeSelect.attr("disabled", "disabled");
        itemCodeInputText.focus();
    };

    function appendToTable(tranType, storeName, itemCode, itemName, unitName, quantity) {
        var rows = transferGridView.find("tbody tr:not(:last-child)");
        var match = false;
        var html;

        if (transactionTypeSelect.length) {
            rows.each(function () {
                var row = $(this);
                if (getColumnText(row, 0) !== tranType &&
                    getColumnText(row, 1) === storeName &&
                    getColumnText(row, 2) === itemCode) {
                    $.notify("Duplicate entry");

                    makeDirty(itemSelect);
                    match = true;
                };

                if (getColumnText(row, 0) === tranType &&
                    getColumnText(row, 1) === storeName &&
                    getColumnText(row, 2) === itemCode &&
                    getColumnText(row, 4) === unitName) {
                    setColumnText(row, 5, getFormattedNumber(parseFloat2(getColumnText(row, 5)) + quantity));

                    addDanger(row);
                    match = true;
                    return;
                }
            });

            if (!match) {
                html = "<tr class='grid2-row'><td>" + tranType + "</td><td>" + storeName + "</td><td>" + itemCode + "</td><td>" + itemName + "</td><td>" + unitName + "</td><td class='text-right'>" + getFormattedNumber(quantity) + "</td>"
                    + "</td><td><a class='pointer' onclick='removeRow($(this));'><i class='ui delete icon'></i></a><a class='pointer' onclick='toggleDanger($(this));'><i class='ui pointer check mark icon'></a></i><a class='pointer' onclick='toggleSuccess($(this));'><i class='ui pointer thumbs up icon'></i></a></td></tr>";
                transferGridView.find("tr:last").before(html);
            };

            return;
        };

        rows.each(function () {
            var row = $(this);
            if (getColumnText(row, 0) === storeName &&
                getColumnText(row, 1) === itemCode) {
                $.notify("Duplicate Entry");

                makeDirty(itemSelect);
                match = true;
            };

            if (getColumnText(row, 0) === storeName &&
                getColumnText(row, 1) === itemCode &&
                getColumnText(row, 3) === unitName) {
                setColumnText(row, 4, getFormattedNumber(parseFloat2(getColumnText(row, 4)) + quantity));

                addDanger(row);
                match = true;
                return;
            }
        });

        if (!match) {
            html = "<tr class='grid2-row'><td>" + storeName + "</td><td>" + itemCode + "</td><td>" + itemName + "</td><td>" + unitName + "</td><td class='text-right'>" + getFormattedNumber(quantity) + "</td>"
                + "</td><td><a class='pointer' onclick='removeRow($(this));'><i class='ui delete icon'></i></a><a class='pointer' onclick='toggleDanger($(this));'><i class='ui pointer check mark icon'></a></i><a class='pointer' onclick='toggleSuccess($(this));'><i class='ui pointer thumbs up icon'></i></a></td></tr>";
            transferGridView.find("tr:last").before(html);
        };
    };

    saveButton.click(function () {
        errorLabel.html("");

        if (transferGridView.find("tr").length === 2) {
            errorLabel.html("Gridview is empty!");
            return false;
        };

        var tableData = tableToJSON(transferGridView);

        if (Validate(tableData)) {
            Callback();
            return true;
        };

        return false;
    });

    function Callback() {
        if (typeof StockAdjustmentFactory_FormvView_SaveButton_Callback === "function") {
            StockAdjustmentFactory_FormvView_SaveButton_Callback();
        };
    };

    function Validate(tableData) {
        var table = JSON.parse(tableData);

        var model = function (itemName, unitName, dr, cr) {
            this.item = itemName;
            this.unit = unitName;
            this.debit = dr;
            this.credit = cr;
        };

        var models = [];
        var debit;
        var credit;
        var i;

        for (i = 0; i < table.length; i++) {
            debit = parseInt2(GetDebit(table, i));
            credit = parseInt2(GetCredit(table, i));

            var item = new model(table[i][2], table[i][4], debit, credit);
            var index = ItemIndex(models, item);

            if (index === -1) {
                models.push(item);
            }
            else {
                models[index].debit += debit;
                models[index].credit += credit;
            };
        };

        for (i = 0; i < models.length; i++) {
            if (models[i]["debit"] !== models[i]["credit"]) {
                $.notify("Referencing sides are not equal");
                return false;
            };
        };

        return true;
    };

    function ItemIndex(models, item) {
        for (j = 0; j < models.length; j++) {
            if ((models[j]["item"] === item["item"])) {
                return j;
            };
        };
        return -1;
    };

    function GetDebit(table, index) {
        return table[index][0] === "Dr" ? table[index][5] : 0;
    };

    function GetCredit(table, index) {
        return table[index][0] === "Cr" ? table[index][5] : 0;
    };

    itemSelect.change(function () {
        itemCodeInputText.val(itemSelect.getSelectedValue());
        loadUnits();
    });

    itemSelect.blur(function () {
        itemCodeInputText.val(itemSelect.getSelectedValue());
        loadUnits();
    });

    itemCodeInputText.blur(function () {
        if (!isNullOrWhiteSpace(itemCodeInputText.val())) {
            itemSelect.val(itemCodeInputText.val());
        };
    });

    function loadStores() {
        displayFieldBinder(storeSelect, "/api/forms/inventory/stores/display-fields");
    };


    function loadItems() {
        function request() {
            var url = "/dashboard/inventory/items/stockable";
            return window.getAjaxRequest(url);
        };

        var ajax = request();
        ajax.success(function (response) {
            var options = "<option>Select</option>";

            $.each(response, function () {
                var option = "<option value='{key}'>{value}</option>";
                option = option.replace("{key}", this.ItemCode);
                option = option.replace("{value}", this.ItemName);

                options += option;
            });

            itemSelect.html(options);
        });
    };

    function loadUnits() {
        function request(itemCode) {
            var url = "/dashboard/inventory/get-associated-units/{*itemCode}";
            url = url.replace("{*itemCode}", itemCode);

            return window.getAjaxRequest(url);
        };

        var itemCode = itemCodeInputText.val();
        var ajax = request(itemCode);
        ajax.success(function (response) {
            var options = "<option>Select</option>";

            $.each(response, function () {
                var option = "<option value='{key}'>{value}</option>";
                option = option.replace("{key}", this.UnitId);
                option = option.replace("{value}", this.UnitName);

                options += option;
            });

            unitSelect.html(options);
        });
    };

    function removeLoaderInstance() {
        removeLoader(transferGridView);
    };

    //Check if ItemPopup window has updated the hidden field.
    function ajaxDataBindCallBack(targetControl) {
        if (targetControl.is(itemSelect)) {
            var itemId = parseInt(itemIdHidden.val() || 0);

            itemIdHidden.val("");

            if (itemId > 0) {
                var targetControls = $([]);
                targetControls.push(itemCodeInputText);
                targetControls.push(itemSelect);

                url = itemIdQuerySericeUrl;
                data = appendParameter("", "itemId", itemId);
                data = getData(data);

                ajaxUpdateVal(url, data, targetControls);
            }
        };
    };

    shortcut.add("F4", function () {
        url = itemPopupUrl;
        showWindow(url);
    });

    shortcut.add("CTRL+ENTER", function () {
        addButton.trigger('click');
    });

    //$("select").dropdown();
    window.overridePath = "/dashboard/inventory/tasks/inventory-transfer";

    var visible = false;

    $(document).ajaxStop(function () {
        setTimeout(function () {
            if (!visible) {
                visible = true;

                $(".page.segment").fadeIn(300);
            };
        }, 200);
    });
</script>